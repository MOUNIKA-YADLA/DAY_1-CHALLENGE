package com.puma.fileupload.controller;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

@Controller
public class FileUploadController {

    @Value("${file.upload.directory}")
    private String uploadDir;

    private final int PAGE_SIZE = 5; // how many files per page

    // =============================
    // Home page - file list
    // =============================
    @GetMapping("/")
    public String listUploadedFiles(@RequestParam(defaultValue = "1") int page, Model model) throws IOException {
        Path uploadPath = Paths.get(uploadDir);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }

        try (Stream<Path> paths = Files.list(uploadPath)) {
            List<Map<String, Object>> files = paths
                    .filter(Files::isRegularFile)
                    .map(path -> {
                        Map<String, Object> fileData = new HashMap<>();
                        fileData.put("filename", path.getFileName().toString());
                        try {
                            fileData.put("size", Files.size(path) / 1024 + " KB");
                            fileData.put("uploadedTime", Files.getLastModifiedTime(path).toString());
                        } catch (IOException e) {
                            fileData.put("size", "N/A");
                            fileData.put("uploadedTime", "N/A");
                        }
                        return fileData;
                    })
                    .sorted(Comparator.comparing(m -> m.get("uploadedTime").toString(), Comparator.reverseOrder()))
                    .collect(Collectors.toList());

            int totalFiles = files.size();
            int totalPages = (int) Math.ceil((double) totalFiles / PAGE_SIZE);

            int fromIndex = (page - 1) * PAGE_SIZE;
            int toIndex = Math.min(fromIndex + PAGE_SIZE, totalFiles);

            List<Map<String, Object>> pageFiles = files.subList(fromIndex, toIndex);

            model.addAttribute("files", pageFiles);
            model.addAttribute("currentPage", page);
            model.addAttribute("totalPages", totalPages);
        }

        return "upload";
    }

    // =============================
    // Handle File Upload
    // =============================
    @PostMapping("/upload")
    public String handleFileUpload(@RequestParam("file") MultipartFile file, Model model) {
        if (file.isEmpty()) {
            model.addAttribute("message", "Please select a file to upload!");
            return "redirect:/";
        }

        try {
            Path uploadPath = Paths.get(uploadDir);
            if (!Files.exists(uploadPath)) {
                Files.createDirectories(uploadPath);
            }

            Path filePath = uploadPath.resolve(file.getOriginalFilename());
            Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

            model.addAttribute("message", "You successfully uploaded: " + file.getOriginalFilename());
        } catch (IOException e) {
            model.addAttribute("message", "File upload failed: " + e.getMessage());
        }

        return "redirect:/";
    }

    // =============================
    // Download File
    // =============================
    @GetMapping("/download/{filename:.+}")
    @ResponseBody
    public ResponseEntity<Resource> downloadFile(@PathVariable String filename) {
        try {
            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();
            Resource resource = new UrlResource(filePath.toUri());

            if (!resource.exists()) {
                return ResponseEntity.notFound().build();
            }

            return ResponseEntity.ok()
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                    .body(resource);

        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }

    // =============================
    // Delete File
    // =============================
    @GetMapping("/delete/{filename:.+}")
    public String deleteFile(@PathVariable String filename, Model model) {
        try {
            Path filePath = Paths.get(uploadDir).resolve(filename).normalize();
            Files.deleteIfExists(filePath);
            model.addAttribute("message", "File deleted successfully: " + filename);
        } catch (Exception e) {
            model.addAttribute("message", "File deletion failed: " + e.getMessage());
        }
        return "redirect:/";
    }
}
