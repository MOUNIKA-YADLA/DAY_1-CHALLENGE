package com.example.pumafileupload.service;

import com.jcraft.jsch.*;
import org.springframework.stereotype.Service;

import java.io.File;
import java.io.InputStream;
import java.util.Properties;

@Service
public class UnixFileTransferService {

    private static final String USER = "your-username";        // <-- replace with your UNIX username
    private static final String HOST = "your-unix-server.com"; // <-- replace with UNIX server IP/hostname
    private static final int PORT = 22;
    private static final String PASSWORD = "your-password";    // <-- or configure SSH keys
    private static final String REMOTE_DIR = "/home/SVC2RUXPBPUMAD/puma/";  
    private static final String SHELL_SCRIPT = "/home/SVC2RUXPBPUMAD/puma/rmi_file_upload.sh";  

    /**
     * Uploads a file to UNIX server and executes the RMI shell script.
     */
    public String uploadAndExecute(String localFilePath) {
        Session session = null;
        ChannelSftp sftpChannel = null;
        ChannelExec execChannel = null;
        StringBuilder result = new StringBuilder();

        try {
            // 1. Connect SSH session
            JSch jsch = new JSch();
            session = jsch.getSession(USER, HOST, PORT);
            session.setPassword(PASSWORD);

            Properties config = new Properties();
            config.put("StrictHostKeyChecking", "no");
            session.setConfig(config);
            session.connect();

            // 2. Upload file via SFTP
            sftpChannel = (ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();

            File file = new File(localFilePath);
            String remotePath = REMOTE_DIR + file.getName();
            sftpChannel.put(localFilePath, remotePath);
            result.append("✅ File uploaded to UNIX: ").append(remotePath).append("\n");

            sftpChannel.disconnect();

            // 3. Execute shell script with file path as parameter
            String command = SHELL_SCRIPT + " " + remotePath;
            execChannel = (ChannelExec) session.openChannel("exec");
            execChannel.setCommand(command);
            execChannel.setErrStream(System.err);

            InputStream in = execChannel.getInputStream();
            execChannel.connect();

            byte[] buffer = new byte[1024];
            while (true) {
                while (in.available() > 0) {
                    int i = in.read(buffer, 0, 1024);
                    if (i < 0) break;
                    result.append(new String(buffer, 0, i));
                }
                if (execChannel.isClosed()) {
                    result.append("\nExit Status: ").append(execChannel.getExitStatus());
                    break;
                }
                Thread.sleep(500);
            }

        } catch (Exception e) {
            e.printStackTrace();
            result.append("❌ Error: ").append(e.getMessage());
        } finally {
            if (execChannel != null) execChannel.disconnect();
            if (session != null) session.disconnect();
        }

        return result.toString();
    }
}



@Autowired
private UnixFileTransferService unixFileTransferService;

@PostMapping("/upload")
public String handleFileUpload(@ModelAttribute FileUploadForm form, Model model) {
    MultipartFile file = form.getFile();
    String filePath = "uploads/" + file.getOriginalFilename();

    try {
        File dest = new File(filePath);
        dest.getParentFile().mkdirs();
        file.transferTo(dest);

        // Upload & Execute RMI shell script
        String unixMessage = unixFileTransferService.uploadAndExecute(filePath);

        model.addAttribute("message", "File uploaded successfully!");
        model.addAttribute("unixMessage", unixMessage);

    } catch (Exception e) {
        model.addAttribute("message", "File upload failed: " + e.getMessage());
    }

    return "upload";
}

