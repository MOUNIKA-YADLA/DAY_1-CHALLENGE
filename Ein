package com.bnpp.pb.puma.ui.gwt.client.broker;

import com.bnpp.pb.common.coreui.gwt.client.gxt3.ui.filter.HiddenFilter;
import com.bnpp.pb.common.coreui.gwt.client.gxt3.ui.grid.GridToolbar;
import com.bnpp.pb.common.coreui.gwt.client.gxt3.ui.grid.TableView;
import com.bnpp.pb.common.coreui.gwt.client.gxt3.ui.grid.profile.AbstractBaseProfile;
import com.bnpp.pb.common.coreui.gwt.client.gxt3.ui.filter.AbstractFilter;
import com.bnpp.pb.puma.ui.gwt.client.ui.filter.DynamicFieldFilter;
import com.bnpp.pb.puma.ui.gwt.client.ui.form.DynamicDetailPanelView;
import com.bnpp.pb.puma.ui.gwt.client.ui.grid.DynamicDetailManagedWindow;
import com.bnpp.pb.puma.ui.gwt.shared.AppIdsConstantsType;
import com.bnpp.pb.puma.common.constants.PumaConstants;

import com.sencha.gxt.widget.core.client.button.TextButton;
import com.sencha.gxt.widget.core.client.container.VerticalLayoutContainer;
import com.sencha.gxt.widget.core.client.Window;
import com.sencha.gxt.widget.core.client.container.Viewport;
import com.sencha.gxt.widget.core.client.ContentPanel;
import com.sencha.gxt.widget.core.client.container.SimpleContainer;
import com.google.gwt.user.client.ui.Frame;

import java.util.ArrayList;
import java.util.Collection;

public class BrokerBOWindow extends DynamicDetailManagedWindow {

    private static DynamicDetailManagedWindow instance;
    protected DetailTableView tableView;

    private BrokerBOWindow() {
        super();
    }

    public static DynamicDetailManagedWindow getInstance() {
        if (instance == null) {
            instance = new BrokerBOWindow();
        }
        return instance;
    }

    @Override
    protected GridToolbar createGridToolBar() {
        return new CustomGxtGridToolbar(tableView);
    }

    @Override
    public String getGwtId() {
        return "broker";
    }

    @Override
    public String getAppId() {
        return AppIdsConstantsType.APP_BROKER.getCode();
    }

    @Override
    public TableView createTableView() {
        this.tableView = new BrokerBOTableView(this); // Replace with your custom table view if needed
        return tableView;
    }

    @Override
    protected DynamicDetailPanelView createDetailPanelView() {
        return new BrokerBODetail();
    }

    @Override
    public AbstractBaseProfile createProfile() {
        return new BrokerBOProfile(tableView);
    }

    @Override
    public DetailTableView getTableView() {
        if (tableView == null) {
            createTableView();
        }
        return tableView;
    }

    @Override
    public String getTitle() {
        return "Brokers";
    }

    @Override
    protected void onBeforeDrillDownFilterPopulate(String[] keyFieldNameArray) {
        Collection<AbstractFilter> removeBrokerFilterList = new ArrayList<>();

        if (getTableView() != null &&
            getTableView().getFiltersBar() != null &&
            getTableView().getFiltersBar().getFilters().size() > 0) {

            for (AbstractFilter brokerFilter : getTableView().getFiltersBar().getFilters()) {
                if (brokerFilter instanceof DynamicFieldFilter || brokerFilter instanceof HiddenFilter) {
                    removeBrokerFilterList.add(brokerFilter);
                }

                if (brokerFilter.getFilterFieldName().equalsIgnoreCase(PumaConstants.FS_FILTER_ID)
                        || brokerFilter.getFilterFieldName().equalsIgnoreCase(PumaConstants.ATTRIBUTE_NAME_FILTER)
                        || brokerFilter.getFilterFieldName().equalsIgnoreCase(PumaConstants.STRATEGY_TYPE_FILTER)
                        || brokerFilter.getFilterFieldName().equalsIgnoreCase(PumaConstants.ACCOUNT_ROLE_FILTER)
                        || brokerFilter.getFilterFieldName().equalsIgnoreCase(PumaConstants.IGNORE_FILTER)) {

                    ((BrokerBOFilterBar) getTableView().getFiltersBar())
                            .getAdvancedSearch()
                            .enableComboBoxandMenuItem(brokerFilter.getFilterValue());
                }
            }

            if (!removeBrokerFilterList.isEmpty()) {
                getTableView().getFiltersBar().getFilters().removeAll(removeBrokerFilterList);
                for (AbstractFilter filter : removeBrokerFilterList) {
                    filter.getFieldsWrapperContainer().removeFromParent();
                }
            }
        }
    }

    // === Custom GXT Grid Toolbar ===
    private class CustomGxtGridToolbar extends GridToolbar {
        public CustomGxtGridToolbar(TableView tableView) {
            super(tableView);

            TextButton googleButton = new TextButton("Open Google");
            googleButton.addSelectHandler(event -> openGoogleWindow());

            this.add(googleButton);
        }
    }

    // === GXT Popup with Google Page ===
    private void openGoogleWindow() {
        Window googleWindow = new Window();
        googleWindow.setHeading("Google");
        googleWindow.setModal(true);
        googleWindow.setPixelSize(1000, 600);
        googleWindow.setResizable(true);

        Frame googleFrame = new Frame("https://www.google.com");
        googleFrame.setWidth("100%");
        googleFrame.setHeight("100%");

        SimpleContainer container = new SimpleContainer();
        container.setWidget(googleFrame);
        container.setSize("100%", "100%");

        googleWindow.setWidget(container);
        googleWindow.center();
        googleWindow.show();
    }
}
