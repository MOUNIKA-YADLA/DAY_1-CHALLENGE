package com.bnpp.pb.common.clientdata.lookup.cache;

import com.bnpp.pb.common.clientdata.to.Party;
import org.junit.Test;
import static org.junit.Assert.*;

public class PartyEntityQueryCacheTest {

    // Test implementation of abstract class
    private static class TestPartyEntityQueryCache extends PartyEntityQueryCache<Party> {
        // No additional methods needed for testing
    }

    // Test implementation of Party
    private static class TestParty extends Party {
        private final Long partyId;

        public TestParty(Long partyId) {
            this.partyId = partyId;
        }

        @Override
        public Long getPartyId() {
            return partyId;
        }
    }

    @Test(timeout = 4000)
    public void testGetId_WithValidParty() throws Throwable {
        // Setup
        TestPartyEntityQueryCache cache = new TestPartyEntityQueryCache();
        Long expectedId = 12345L;
        Party party = new TestParty(expectedId);

        // Execute
        Long result = cache.getId(party);

        // Verify
        assertEquals(expectedId, result);
    }

    @Test(timeout = 4000, expected = NullPointerException.class)
    public void testGetId_WithNullParty() throws Throwable {
        // Setup
        TestPartyEntityQueryCache cache = new TestPartyEntityQueryCache();

        // Execute
        cache.getId(null);
    }

    @Test(timeout = 4000)
    public void testAbstractClassCannotBeInstantiated() throws Throwable {
        try {
            // This should fail since PartyEntityQueryCache is abstract
            PartyEntityQueryCache<?> cache = new PartyEntityQueryCache<Party>() {};
            fail("Should not be able to instantiate abstract class directly");
        } catch (Exception e) {
            // Expected behavior
        }
    }

    @Test(timeout = 4000)
    public void testConcreteImplementationWorks() throws Throwable {
        TestPartyEntityQueryCache cache = new TestPartyEntityQueryCache();
        assertNotNull(cache);
    }
}
