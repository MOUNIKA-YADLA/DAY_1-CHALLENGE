package com.bnpp.bb.primeservices.service;

import com.bnpp.bb.primeservices.model.*;
import com.bnpp.bb.primeservices.repository.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.util.*;

@Service
public class BankAccountExcelService {

    @Autowired
    private BankAccountRepository repository;
    
    @Autowired
    private UploadRecordRepository uploadRecordRepository;
    
    @Value("${file.upload.dir}")
    private String uploadDir;

    public BankAccountUploadResponse processExcelFile(MultipartFile file, String username) throws IOException {
        // Validate input
        if (file == null || file.isEmpty()) {
            throw new IllegalArgumentException("Uploaded file cannot be empty");
        }

        List<BankAccountUploadResult> results = new ArrayList<>();
        String originalFilename = file.getOriginalFilename();
        String processedFilename = "results_" + System.currentTimeMillis() + ".xlsx";
        
        // Create upload record
        UploadRecord record = new UploadRecord();
        record.setOriginalFilename(originalFilename);
        record.setProcessedFilename(processedFilename);
        record.setUploadDate(LocalDateTime.now());
        record.setUploadedBy(username);
        record.setStatus("PROCESSING");
        
        try {
            // Store original file
            String filePath = storeFile(file, originalFilename);
            record.setInputFilePath(filePath);
            uploadRecordRepository.save(record);
            
            // Process Excel
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0);
            
            // Validate sheet
            if (sheet == null || sheet.getPhysicalNumberOfRows() <= 1) {
                throw new IllegalArgumentException("Excel file must contain data with header row");
            }

            Iterator<Row> rows = sheet.iterator();
            if (rows.hasNext()) rows.next(); // Skip header
            
            while (rows.hasNext()) {
                BankAccountUploadResult result = new BankAccountUploadResult();
                try {
                    Row row = rows.next();
                    BankAccount account = new BankAccount();
                    
                    // Process cells with null checks
                    account.setAccountId(getStringValue(row.getCell(0)));
                    account.setAccountName(getStringValue(row.getCell(1)));
                    account.setAccountType(getStringValue(row.getCell(2)));
                    account.setBalance(getNumericValue(row.getCell(3)));
                    account.setBranchCode(getStringValue(row.getCell(4)));
                    
                    validateAccount(account);
                    repository.save(account);
                    
                    result.setSuccess(true);
                    result.setMessage("Account created successfully");
                    result.setAccount(account);
                } catch (Exception e) {
                    result.setSuccess(false);
                    result.setMessage(e.getMessage());
                }
                results.add(result);
            }
            
            // Generate result file
            byte[] resultFile = generateResultFile(results);
            String resultPath = storeResultFile(resultFile, processedFilename);
            record.setOutputFilePath(resultPath);
            record.setStatus("COMPLETED");
            
            BankAccountUploadResponse response = new BankAccountUploadResponse(
                results, 
                originalFilename, 
                processedFilename
            );
            response.setInputFileReference(filePath);
            response.setOutputFileReference(resultPath);
            
            return response;
            
        } catch (Exception e) {
            record.setStatus("FAILED");
            record.setErrorMessage(e.getMessage());
            uploadRecordRepository.save(record);
            throw e;
        }
    }

    private String storeFile(MultipartFile file, String filename) throws IOException {
        Path uploadPath = Paths.get(uploadDir);
        if (!Files.exists(uploadPath)) {
            Files.createDirectories(uploadPath);
        }
        
        Path filePath = uploadPath.resolve(filename);
        Files.copy(file.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);
        return filePath.toString();
    }

    private String storeResultFile(byte[] content, String filename) throws IOException {
        Path filePath = Paths.get(uploadDir, filename);
        Files.write(filePath, content);
        return filePath.toString();
    }

    private byte[] generateResultFile(List<BankAccountUploadResult> results) throws IOException {
        try (Workbook workbook = new XSSFWorkbook(); 
             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            
            Sheet sheet = workbook.createSheet("Results");
            
            // Create header
            Row header = sheet.createRow(0);
            header.createCell(0).setCellValue("Account ID");
            header.createCell(1).setCellValue("Account Name");
            header.createCell(2).setCellValue("Status");
            header.createCell(3).setCellValue("Message");
            
            // Fill data
            int rowNum = 1;
            for (BankAccountUploadResult result : results) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(result.getAccount().getAccountId());
                row.createCell(1).setCellValue(result.getAccount().getAccountName());
                row.createCell(2).setCellValue(result.isSuccess() ? "SUCCESS" : "FAILED");
                row.createCell(3).setCellValue(result.getMessage());
            }
            
            workbook.write(out);
            return out.toByteArray();
        }
    }

    private void validateAccount(BankAccount account) {
        if (account.getAccountId() == null || account.getAccountId().trim().isEmpty()) {
            throw new IllegalArgumentException("Account ID is required");
        }
        if (account.getAccountId().length() > 8) {
            throw new IllegalArgumentException("Account ID must be â‰¤8 characters");
        }
        if (repository.existsByAccountId(account.getAccountId())) {
            throw new IllegalArgumentException("Account ID already exists");
        }
        if (account.getBalance().compareTo(BigDecimal.ZERO) < 0) {
            throw new IllegalArgumentException("Balance must be positive");
        }
    }

    private String getStringValue(Cell cell) {
        if (cell == null) return null;
        return cell.toString().trim();
    }

    private BigDecimal getNumericValue(Cell cell) {
        if (cell == null) return BigDecimal.ZERO;
        try {
            return BigDecimal.valueOf(cell.getNumericCellValue());
        } catch (IllegalStateException e) {
            return new BigDecimal(cell.toString());
        }
    }
}


com.bnpp.bb.primeservices.model;

import java.util.List;

public class BankAccountUploadResponse {
    private List<BankAccountUploadResult> results;
    private String originalFilename;
    private String processedFilename;
    private String inputFileReference;
    private String outputFileReference;

    // Constructor
    public BankAccountUploadResponse(List<BankAccountUploadResult> results, 
                                   String originalFilename, 
                                   String processedFilename) {
        this.results = results;
        this.originalFilename = originalFilename;
        this.processedFilename = processedFilename;
    }

    // Getters and Setters
    public List<BankAccountUploadResult> getResults() {
        return results;
    }

    public void setResults(List<BankAccountUploadResult> results) {
        this.results = results;
    }

    public String getOriginalFilename() {
        return originalFilename;
    }

    public void setOriginalFilename(String originalFilename) {
        this.originalFilename = originalFilename;
    }

    public String getProcessedFilename() {
        return processedFilename;
    }

    public void setProcessedFilename(String processedFilename) {
        this.processedFilename = processedFilename;
    }

    public String getInputFileReference() {
        return inputFileReference;
    }

    public void setInputFileReference(String inputFileReference) {
        this.inputFileReference = inputFileReference;
    }

    public String getOutputFileReference() {
        return outputFileReference;
    }

    public void setOutputFileReference(String outputFileReference) {
        this.outputFileReference = outputFileReference;
    }
}
!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Bank Account Upload</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        .upload-container {
            max-width: 800px;
            margin: 2rem auto;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        .drop-zone {
            border: 2px dashed #ccc;
            padding: 3rem;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
        }
        .drop-zone.active {
            border-color: #0d6efd;
            background-color: #f0f7ff;
        }
        #fileInfo {
            margin-top: 1rem;
        }
        #progressBar {
            height: 8px;
            margin-top: 1rem;
            display: none;
        }
        .result-table {
            margin-top: 2rem;
        }
    </style>
</head>
<body>
    <div class="container upload-container">
        <h2 class="text-center mb-4">Bank Account Bulk Upload</h2>
        
        <form id="uploadForm" th:action="@{/bank/accounts/upload}" method="POST" enctype="multipart/form-data">
            <div class="drop-zone" id="dropZone">
                <i class="fas fa-file-excel fa-3x mb-3" style="color: #1d6f42;"></i>
                <p>Drag & drop your Excel file here or click to browse</p>
                <p class="text-muted">Supports .xlsx, .xls files</p>
                <input type="file" id="fileInput" name="file" accept=".xlsx,.xls" hidden required>
            </div>
            
            <div id="fileInfo" class="alert alert-info" style="display:none;">
                <i class="fas fa-file me-2"></i>
                <span id="fileName"></span>
                <button type="button" id="clearFile" class="btn btn-sm btn-danger float-end">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="progress" id="progressBar">
                <div class="progress-bar progress-bar-striped progress-bar-animated" 
                     role="progressbar" style="width: 0%"></div>
            </div>
            
            <div class="d-grid mt-3">
                <button type="submit" id="processBtn" class="btn btn-primary btn-lg" disabled>
                    <i class="fas fa-cog me-2"></i> Process File
                </button>
            </div>
        </form>
        
        <div id="results" class="result-table"></div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const dropZone = document.getElementById('dropZone');
            const fileInput = document.getElementById('fileInput');
            const fileInfo = document.getElementById('fileInfo');
            const fileName = document.getElementById('fileName');
            const clearFile = document.getElementById('clearFile');
            const processBtn = document.getElementById('processBtn');
            const progressBar = document.getElementById('progressBar');
            const resultsDiv = document.getElementById('results');
            const form = document.getElementById('uploadForm');
            
            let currentFile = null;
            
            // Drag and drop handlers
            ['dragenter', 'dragover'].forEach(event => {
                dropZone.addEventListener(event, highlight, false);
            });
            
            ['dragleave', 'drop'].forEach(event => {
                dropZone.addEventListener(event, unhighlight, false);
            });
            
            function highlight(e) {
                e.preventDefault();
                dropZone.classList.add('active');
            }
            
            function unhighlight(e) {
                e.preventDefault();
                dropZone.classList.remove('active');
            }
            
            dropZone.addEventListener('drop', function(e) {
                e.preventDefault();
                if (e.dataTransfer.files.length) {
                    fileInput.files = e.dataTransfer.files;
                    handleFileSelection();
                }
            });
            
            // File selection handler
            fileInput.addEventListener('change', handleFileSelection);
            
            function handleFileSelection() {
                currentFile = fileInput.files[0];
                if (currentFile) {
                    fileName.textContent = currentFile.name;
                    fileInfo.style.display = 'block';
                    processBtn.disabled = false;
                }
            }
            
            // Clear file
            clearFile.addEventListener('click', function() {
                fileInput.value = '';
                fileInfo.style.display = 'none';
                processBtn.disabled = true;
                currentFile = null;
            });
            
            // Form submission
            form.addEventListener('submit', function(e) {
                e.preventDefault();
                
                if (!currentFile) return;
                
                processBtn.disabled = true;
                processBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i> Processing...';
                progressBar.style.display = 'block';
                
                const formData = new FormData(form);
                const xhr = new XMLHttpRequest();
                
                xhr.upload.onprogress = function(e) {
                    if (e.lengthComputable) {
                        const percent = Math.round((e.loaded / e.total) * 100);
                        progressBar.querySelector('.progress-bar').style.width = percent + '%';
                    }
                };
                
                xhr.onload = function() {
                    if (xhr.status === 200) {
                        const response = JSON.parse(xhr.responseText);
                        showResults(response);
                    } else {
                        alert('Error: ' + xhr.responseText);
                    }
                    resetForm();
                };
                
                xhr.open('POST', form.action, true);
                xhr.send(formData);
            });
            
            function showResults(response) {
                let html = `
                    <h4 class="mt-4">Processing Results</h4>
                    <div class="alert alert-success">
                        Processed ${response.results.length} accounts | 
                        <a href="/bank/accounts/download/${response.processedFilename}" class="alert-link">
                            <i class="fas fa-download"></i> Download Results
                        </a>
                    </div>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Account ID</th>
                                <th>Account Name</th>
                                <th>Status</th>
                                <th>Message</th>
                            </tr>
                        </thead>
                        <tbody>`;
                
                response.results.forEach(result => {
                    const rowClass = result.success ? 'table-success' : 'table-danger';
                    html += `
                        <tr class="${rowClass}">
                            <td>${result.account.accountId}</td>
                            <td>${result.account.accountName}</td>
                            <td>${result.success ? 'SUCCESS' : 'FAILED'}</td>
                            <td>${result.message}</td>
                        </tr>`;
                });
                
                html += `</tbody></table>`;
                resultsDiv.innerHTML = html;
            }
            
            function resetForm() {
                progressBar.style.display = 'none';
                progressBar.querySelector('.progress-bar').style.width = '0%';
                processBtn.disabled = false;
                processBtn.innerHTML = '<i class="fas fa-cog me-2"></i> Process File';
            }
        });
    </script>
</body>
</html>
package com.bnpp.bb.primeservices.service;

import com.bnpp.bb.primeservices.model.*;
import com.bnpp.bb.primeservices.repository.*;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.*;
import java.time.LocalDateTime;
import java.util.*;

@Service
public class BankAccountExcelService {

    @Autowired
    private BankAccountRepository repository;
    
    @Autowired
    private UploadRecordRepository uploadRecordRepository;
    
    @Value("${file.upload.dir}")
    private String uploadDir;

    public BankAccountUploadResponse processExcelFile(MultipartFile file, String username) throws IOException {
        List<BankAccountUploadResult> results = new ArrayList<>();
        String originalFilename = file.getOriginalFilename();
        String processedFilename = "results_" + System.currentTimeMillis() + ".xlsx";
        
        // Create upload record
        UploadRecord record = new UploadRecord();
        record.setOriginalFilename(originalFilename);
        record.setProcessedFilename(processedFilename);
        record.setUploadDate(LocalDateTime.now());
        record.setUploadedBy(username);
        record.setStatus("PROCESSING");
        
        try {
            // Store original file
            String filePath = storeFile(file, originalFilename);
            record.setInputFilePath(filePath);
            uploadRecordRepository.save(record);
            
            // Process Excel
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0);
            Iterator<Row> rows = sheet.iterator();
            
            if (rows.hasNext()) rows.next(); // Skip header
            
            while (rows.hasNext()) {
                BankAccountUploadResult result = new BankAccountUploadResult();
                try {
                    Row row = rows.next();
                    BankAccount account = new BankAccount();
                    
                    account.setAccountId(getStringValue(row.getCell(0)));
                    account.setAccountName(getStringValue(row.getCell(1)));
                    account.setAccountType(getStringValue(row.getCell(2)));
                    account.setBalance(getNumericValue(row.getCell(3)));
                    account.setBranchCode(getStringValue(row.getCell(4)));
                    
                    validateAccount(account);
                    repository.save(account);
                    
                    result.setSuccess(true);
                    result.setMessage("Account created successfully");
                    result.setAccount(account);
                } catch (Exception e) {
                    result.setSuccess(false);
                    result.setMessage(e.getMessage());
                }
                results.add(result);
            }
            
            // Generate result file
            byte[] resultFile = generateResultFile(results);
            String resultPath = storeResultFile(resultFile, processedFilename);
            record.setOutputFilePath(resultPath);
            record.setStatus("COMPLETED");
            
            return new BankAccountUploadResponse(results, originalFilename, processedFilename);
            
        } catch (Exception e) {
            record.setStatus("FAILED");
            record.setErrorMessage(e.getMessage());
            throw e;
        } finally {
            uploadRecordRepository.save(record);
        }
    }

    private String storeFile(MultipartFile file, String filename) throws IOException {
        Path path = Paths.get(uploadDir, filename);
        Files.createDirectories(path.getParent());
        Files.copy(file.getInputStream(), path, StandardCopyOption.REPLACE_EXISTING);
        return path.toString();
    }

    private String storeResultFile(byte[] content, String filename) throws IOException {
        Path path = Paths.get(uploadDir, filename);
        Files.write(path, content);
        return path.toString();
    }

    private byte[] generateResultFile(List<BankAccountUploadResult> results) throws IOException {
        try (Workbook workbook = new XSSFWorkbook(); 
             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            
            Sheet sheet = workbook.createSheet("Results");
            
            // Create header
            Row header = sheet.createRow(0);
            header.createCell(0).setCellValue("Account ID");
            header.createCell(1).setCellValue("Account Name");
            header.createCell(2).setCellValue("Status");
            header.createCell(3).setCellValue("Message");
            
            // Fill data
            int rowNum = 1;
            for (BankAccountUploadResult result : results) {
                Row row = sheet.createRow(rowNum++);
                row.createCell(0).setCellValue(result.getAccount().getAccountId());
                row.createCell(1).setCellValue(result.getAccount().getAccountName());
                row.createCell(2).setCellValue(result.isSuccess() ? "SUCCESS" : "FAILED");
                row.createCell(3).setCellValue(result.getMessage());
            }
            
            workbook.write(out);
            return out.toByteArray();
        }
    }

    private void validateAccount(BankAccount account) {
        if (account.getAccountId() == null || account.getAccountId().length() > 8) {
            throw new IllegalArgumentException("Account ID must be â‰¤8 characters");
        }
        if (repository.existsByAccountId(account.getAccountId())) {
            throw new IllegalArgumentException("Account ID already exists");
        }
        if (account.getBalance().compareTo(BigDecimal.ZERO) < 0) {
            throw new IllegalArgumentException("Balance must be positive");
        }
    }

    private String getStringValue(Cell cell) {
        return cell == null ? null : cell.getStringCellValue();
    }

    private BigDecimal getNumericValue(Cell cell) {
        return cell == null ? BigDecimal.ZERO : BigDecimal.valueOf(cell.getNumericCellValue());
    }
}



