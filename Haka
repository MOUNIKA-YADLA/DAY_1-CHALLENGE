history.html
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="UTF-8">
    <title>Upload History | Bank Account Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <style>
        body {
            background: linear-gradient(135deg, #13c2c7, #2a5298);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: white;
            text-align: center;
            font-size: 1.2rem;
        }
        :root {
            --success-color: #28a745;
            --fail-color: #dc3545;
        }
        .history-card {
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            transition: transform 0.2s;
            margin: 20px;
        }
        .history-card:hover {
            transform: translateY(-3px);
        }
        .success-badge {
            background-color: var(--success-color);
        }
        .fail-badge {
            background-color: var(--fail-color);
        }
        .file-icon i {
            font-size: 1.5rem;
            color: #6c757d;
        }
        .btn.btn-primary {
            background-color: white;
            color: #1e3c72;
            border: 2px solid #1e3c72;
            padding: 0.3rem 0.8rem;
            font-weight: bold;
        }
    </style>
</head>
<body>

<button onclick="window.location.href='/welcome'" class="btn btn-primary mb-4">Return to Dashboard</button>

<!-- Stats Cards -->
<div class="row mb-4">
    <div class="col-md-4">
        <div class="card text-white bg-success mb-3">
            <div class="card-body">
                <h5 class="card-title">Successful Records</h5>
                <h2 id="totalSuccess" class="card-text">0</h2>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-danger mb-3">
            <div class="card-body">
                <h5 class="card-title">Failed Records</h5>
                <h2 id="totalFail" class="card-text">0</h2>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card text-white bg-primary mb-3">
            <div class="card-body">
                <h5 class="card-title">Total Uploads</h5>
                <h2 id="totalUploads" class="card-text">0</h2>
            </div>
        </div>
    </div>
</div>

<!-- History Table -->
<div class="card history-card">
    <div class="card-header bg-white">
        <div class="input-group mb-3" style="max-width: 300px;">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <input type="text" id="searchInput" class="form-control" placeholder="Search...">
        </div>
    </div>
    <div class="card-body">
        <div class="table-responsive">
            <table class="table table-hover align-middle">
                <thead>
                    <tr>
                        <th>File</th>
                        <th>Uploaded By</th>
                        <th>Date & Time</th>
                        <th class="text-end">Status & Actions</th>
                    </tr>
                </thead>
                <tbody id="historyTable">
                    <!-- Data will be inserted here -->
                </tbody>
            </table>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    fetch('/api/history')
    .then(res => res.json())
    .then(data => {
        // Update stats
        const totalSuccess = data.reduce((sum, record) => sum + record.successCount, 0);
        const totalFail = data.reduce((sum, record) => sum + record.failureCount, 0);
        document.getElementById('totalSuccess').textContent = totalSuccess;
        document.getElementById('totalFail').textContent = totalFail;
        document.getElementById('totalUploads').textContent = data.length;

        // Fill table
        const table = document.getElementById('historyTable');
        data.forEach(record => {
            const row = table.insertRow();
            row.innerHTML = `
                <td><i class="bi bi-file-earmark-excel file-icon"></i> ${record.filename}</td>
                <td><span class="badge bg-secondary"><i class="bi bi-person-fill"></i> ${record.username}</span></td>
                <td>${new Date(record.uploadTime).toLocaleString()}</td>
                <td class="text-end">
                    <span class="badge success-badge"><i class="bi bi-check-circle"></i> ${record.successCount}</span>
                    <span class="badge fail-badge ms-2"><i class="bi bi-x-circle"></i> ${record.failureCount}</span>
                    <a href="/api/download/${record.filename}" class="btn btn-sm btn-outline-light ms-2" title="Download">
                        <i class="bi bi-download"></i>
                    </a>
                </td>
            `;
        });

        // Search function
        document.getElementById('searchInput').addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const rows = table.getElementsByTagName('tr');
            Array.from(rows).forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchTerm) ? '' : 'none';
            });
        });
    });
});
</script>

</body>
</html>



package com.bnpp.bb.primeservices.service;

import com.bnpp.bb.primeservices.model.UploadRecord;
import com.bnpp.bb.primeservices.repository.UploadRecordRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class UploadHistoryService {

    @Autowired
    private UploadRecordRepository uploadRecordRepository;

    public void recordUpload(String filename, String username, int successCount, int failureCount) {
        UploadRecord record = new UploadRecord(filename, username, successCount, failureCount);
        uploadRecordRepository.save(record);
    }

    public List<UploadRecord> getAllUploads() {
        return uploadRecordRepository.findAllByOrderByUploadTimeDesc();
    }
}


package com.bnpp.bb.primeservices.controller;

import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.nio.file.Path;
import java.nio.file.Paths;

@RestController
@RequestMapping("/api")
public class DownloadController {

    private final Path fileStorageLocation = Paths.get("uploads").toAbsolutePath().normalize(); // folder where files are saved

    @GetMapping("/download/{filename:.+}")
    public ResponseEntity<Resource> downloadFile(@PathVariable String filename) {
        try {
            Path filePath = fileStorageLocation.resolve(filename).normalize();
            Resource resource = new UrlResource(filePath.toUri());

            if (resource.exists()) {
                return ResponseEntity.ok()
                        .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + resource.getFilename() + "\"")
                        .body(resource);
            } else {
                return ResponseEntity.notFound().build();
            }
        } catch (Exception e) {
            return ResponseEntity.internalServerError().build();
        }
    }
}

